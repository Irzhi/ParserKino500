import streamlit as st
import pandas as pd
import requests
import json
from datetime import datetime
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ö–∏–Ω–æ–ø–æ–∏—Å–∫ –ü–∞—Ä—Å–µ—Ä",
    page_icon="üé¨",
    layout="wide"
)

# API URLs
API_URL = 'https://kinopoiskapiunofficial.tech/api/v2.2/films/{}'
API_URL_STAFF = 'https://kinopoiskapiunofficial.tech/api/v1/staff?filmId={}'
API_URL_BOXOFFICE = 'https://kinopoiskapiunofficial.tech/api/v2.2/films/{}/box_office'
API_URL_DISTRIBUTIONS = 'https://kinopoiskapiunofficial.tech/api/v2.2/films/{}/distributions'

def get_headers(api_key):
    return {
        'X-API-KEY': api_key,
        'Content-Type': 'application/json',
    }

def format_money(value):
    if not value or value == '-' or value is None:
        return '-'
    parts = str(value).split()
    if not parts or not parts[0].replace(',', '').replace(' ', '').isdigit():
        return value
    try:
        num = int(parts[0].replace(' ', '').replace(',', ''))
        currency = parts[1] if len(parts) > 1 and parts[1] else 'USD'
        formatted = f"{num:,}".replace(",", " ")
        return f"{formatted} {currency}".strip()
    except Exception as e:
        return value

def format_date(date_str):
    if not date_str or date_str == '-':
        return '-'
    try:
        dt = datetime.strptime(date_str[:10], '%Y-%m-%d')
        return dt.strftime('%d.%m.%Y')
    except Exception as e:
        return date_str

def get_film_info(film_id, api_key):
    url = API_URL.format(film_id)
    try:
        response = requests.get(url, headers=get_headers(api_key), timeout=10)
        if response.status_code != 200:
            return None, f'–û—à–∏–±–∫–∞: {response.status_code} ‚Äî {response.text}'
        return response.json(), None
    except Exception as e:
        return None, f'–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}'

def get_film_cast(film_id, api_key):
    url = API_URL_STAFF.format(film_id)
    try:
        response = requests.get(url, headers=get_headers(api_key), timeout=10)
        if response.status_code != 200:
            return []
        data = response.json()
        cast = []
        for p in data:
            profession = (p.get('professionText') or p.get('profession') or '').lower()
            if any(x in profession for x in ['–º–æ–Ω—Ç–∞–∂–µ—Ä', '—Ö—É–¥–æ–∂–Ω–∏–∫']):
                continue
            name = p.get('nameRu') or p.get('nameEn') or '-'
            staff_id = p.get('staffId')
            if staff_id:
                cast.append(f"{name};{staff_id}")
            else:
                cast.append(f"{name}")
        return cast
    except Exception as e:
        return []

def get_film_boxoffice(film_id, api_key):
    url = API_URL_BOXOFFICE.format(film_id)
    try:
        response = requests.get(url, headers=get_headers(api_key), timeout=10)
        if response.status_code != 200:
            return {}
        data = response.json()
        currency_symbols = {
            'USD': '$', 'RUB': '‚ÇΩ', 'EUR': '‚Ç¨', 'GBP': '¬£',
            'CNY': '¬•', 'JPY': '¬•', 'KZT': '‚Ç∏', 'UAH': '‚Ç¥',
            'BYN': 'Br', 'INR': '‚Çπ',
        }
        result = {}
        for item in data.get('items', []):
            amount = item.get('amount')
            currency = item.get('currencyCode', 'USD')
            symbol = currency_symbols.get(currency, currency)
            val = f"{amount} {symbol}" if amount else '-'
            if item['type'] == 'BUDGET':
                result['budget'] = val
            elif item['type'] == 'WORLD':
                result['world'] = val
            elif item['type'] == 'RUS':
                result['russia'] = val
            elif item['type'] == 'USA':
                result['usa'] = val
            elif item['type'] == 'MARKETING':
                result['marketing'] = val
        return result
    except Exception as e:
        return {}

def get_film_premieres(film_id, api_key):
    url = API_URL_DISTRIBUTIONS.format(film_id)
    try:
        response = requests.get(url, headers=get_headers(api_key), timeout=10)
        if response.status_code != 200:
            return '-', '-'
        data = response.json()
        premiere_rf = '-'
        premiere_world = '-'
        for item in data.get('items', []):
            t = item.get('type', '').upper()
            date = item.get('date', '-')
            country_obj = item.get('country')
            if t == 'WORLD_PREMIER':
                premiere_world = format_date(date)
            if t == 'COUNTRY_SPECIFIC' and country_obj:
                country_name = country_obj.get('country', '').lower()
                if country_name in ('—Ä–æ—Å—Å–∏—è', 'russia'):
                    premiere_rf = format_date(date)
        return premiere_rf, premiere_world
    except Exception as e:
        return '-', '-'

def create_excel_file(film_data, cast_data):
    """–°–æ–∑–¥–∞–µ—Ç Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ñ–∏–ª—å–º–µ"""
    output = io.BytesIO()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º–∞
    df_main = pd.DataFrame([film_data])
    
    # –î–∞–Ω–Ω—ã–µ –æ –∫–∞—Å—Ç–µ
    cast_list = []
    for line in cast_data:
        if ';' in line:
            name, staff_id = line.split(';', 1)
            cast_list.append({'–ò–º—è': name.strip(), 'ID': staff_id.strip()})
        else:
            cast_list.append({'–ò–º—è': line.strip(), 'ID': ''})
    
    df_cast = pd.DataFrame(cast_list)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Excel
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df_main.to_excel(writer, sheet_name='–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', index=False)
        df_cast.to_excel(writer, sheet_name='–ê–∫—Ç–µ—Ä—ã –∏ —Å—ä–µ–º–æ—á–Ω–∞—è –≥—Ä—É–ø–ø–∞', index=False)
    
    output.seek(0)
    return output

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
if 'film_data' not in st.session_state:
    st.session_state.film_data = {}
if 'cast_data' not in st.session_state:
    st.session_state.cast_data = []

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üé¨ –ö–∏–Ω–æ–ø–æ–∏—Å–∫ –ü–∞—Ä—Å–µ—Ä")
st.markdown("–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–∞—Ö –∏ —Å–µ—Ä–∏–∞–ª–∞—Ö —á–µ—Ä–µ–∑ API –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
with st.sidebar:
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    api_key = st.text_input("API-–∫–ª—é—á:", type="password", help="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API-–∫–ª—é—á –æ—Ç –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞")
    
    if st.button("‚ÑπÔ∏è –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å API-–∫–ª—é—á?"):
        st.info("""
        1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ kinopoiskapiunofficial.tech
        2. –ü–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API-–∫–ª—é—á
        3. –í—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ø–æ–ª–µ –≤—ã—à–µ
        """)

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
col1, col2 = st.columns([1, 3])

with col1:
    st.header("üîç –ü–æ–∏—Å–∫")
    film_id = st.text_input("ID —Ñ–∏–ª—å–º–∞/—Å–µ—Ä–∏–∞–ª–∞:", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 326")
    
    if st.button("üéØ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", type="primary"):
        if not api_key:
            st.error("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ API-–∫–ª—é—á –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏!")
        elif not film_id.isdigit():
            st.error("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID!")
        else:
            with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."):
                # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                data, error = get_film_info(film_id, api_key)
                
                if error or not data:
                    st.error(f"‚ùå {error or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}")
                else:
                    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    def safe(val):
                        return '-' if val is None or val == '' else val
                    
                    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    film_info = {
                        '–ù–∞–∑–≤–∞–Ω–∏–µ (RU)': safe(data.get('nameRu')),
                        '–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ': safe(data.get('nameOriginal')),
                        '–ì–æ–¥': safe(data.get('year')),
                        '–ñ–∞–Ω—Ä—ã': safe(', '.join([g['genre'] for g in data.get('genres', [])]) if data.get('genres') else '-'),
                        '–°—Ç—Ä–∞–Ω–∞': safe(', '.join([c['country'] for c in data.get('countries', []) if c.get('country')])),
                        '–†–µ–π—Ç–∏–Ω–≥ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞': safe(data.get('ratingKinopoisk')),
                        '–û–ø–∏—Å–∞–Ω–∏–µ': safe(data.get('description'))
                    }
                    
                    # –ö–∞—Å—Å–∞
                    boxoffice = get_film_boxoffice(film_id, api_key)
                    film_info.update({
                        '–ë—é–¥–∂–µ—Ç': format_money(boxoffice.get('budget', '-')) if boxoffice else '-',
                        '–ö–∞—Å—Å–∞ (–º–∏—Ä)': format_money(boxoffice.get('world', '-')) if boxoffice else '-',
                        '–ö–∞—Å—Å–∞ (–†–§)': format_money(boxoffice.get('russia', '-')) if boxoffice else '-',
                        '–ö–∞—Å—Å–∞ (–°–®–ê)': format_money(boxoffice.get('usa', '-')) if boxoffice else '-'
                    })
                    
                    # –ü—Ä–µ–º—å–µ—Ä—ã
                    premiere_rf, premiere_world = get_film_premieres(film_id, api_key)
                    film_info.update({
                        '–ü—Ä–µ–º—å–µ—Ä–∞ –≤ –†–§': safe(premiere_rf),
                        '–ü—Ä–µ–º—å–µ—Ä–∞ –º–∏—Ä–æ–≤–∞—è': safe(premiere_world)
                    })
                    
                    # –ê–∫—Ç–µ—Ä—ã –∏ —Å—ä–µ–º–æ—á–Ω–∞—è –≥—Ä—É–ø–ø–∞
                    cast = get_film_cast(film_id, api_key)
                    
                    st.session_state.film_data = film_info
                    st.session_state.cast_data = cast
                    
                    st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")

with col2:
    st.header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    
    if st.session_state.film_data:
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        st.subheader("üé≠ –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –≤–∏–¥–µ –º–µ—Ç—Ä–∏–∫ –∏ –ø–æ–ª–µ–π
        col_info1, col_info2 = st.columns(2)
        
        with col_info1:
            st.metric("–ù–∞–∑–≤–∞–Ω–∏–µ (RU)", st.session_state.film_data.get('–ù–∞–∑–≤–∞–Ω–∏–µ (RU)', '-'))
            st.metric("–ì–æ–¥", st.session_state.film_data.get('–ì–æ–¥', '-'))
            st.metric("–†–µ–π—Ç–∏–Ω–≥ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞", st.session_state.film_data.get('–†–µ–π—Ç–∏–Ω–≥ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞', '-'))
            st.metric("–ü—Ä–µ–º—å–µ—Ä–∞ –≤ –†–§", st.session_state.film_data.get('–ü—Ä–µ–º—å–µ—Ä–∞ –≤ –†–§', '-'))
        
        with col_info2:
            st.metric("–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ", st.session_state.film_data.get('–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ', '-'))
            st.metric("–°—Ç—Ä–∞–Ω–∞", st.session_state.film_data.get('–°—Ç—Ä–∞–Ω–∞', '-'))
            st.metric("–ñ–∞–Ω—Ä—ã", st.session_state.film_data.get('–ñ–∞–Ω—Ä—ã', '-'))
            st.metric("–ü—Ä–µ–º—å–µ—Ä–∞ –º–∏—Ä–æ–≤–∞—è", st.session_state.film_data.get('–ü—Ä–µ–º—å–µ—Ä–∞ –º–∏—Ä–æ–≤–∞—è', '-'))
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        st.subheader("üìù –û–ø–∏—Å–∞–Ω–∏–µ")
        st.write(st.session_state.film_data.get('–û–ø–∏—Å–∞–Ω–∏–µ', '-'))
        
        # –§–∏–Ω–∞–Ω—Å—ã
        st.subheader("üí∞ –§–∏–Ω–∞–Ω—Å—ã")
        col_money1, col_money2 = st.columns(2)
        
        with col_money1:
            st.metric("–ë—é–¥–∂–µ—Ç", st.session_state.film_data.get('–ë—é–¥–∂–µ—Ç', '-'))
            st.metric("–ö–∞—Å—Å–∞ (–º–∏—Ä)", st.session_state.film_data.get('–ö–∞—Å—Å–∞ (–º–∏—Ä)', '-'))
        
        with col_money2:
            st.metric("–ö–∞—Å—Å–∞ (–†–§)", st.session_state.film_data.get('–ö–∞—Å—Å–∞ (–†–§)', '-'))
            st.metric("–ö–∞—Å—Å–∞ (–°–®–ê)", st.session_state.film_data.get('–ö–∞—Å—Å–∞ (–°–®–ê)', '-'))
        
        # –ê–∫—Ç–µ—Ä—ã –∏ —Å—ä–µ–º–æ—á–Ω–∞—è –≥—Ä—É–ø–ø–∞
        st.subheader("üé¨ –ê–∫—Ç–µ—Ä—ã –∏ —Å—ä–µ–º–æ—á–Ω–∞—è –≥—Ä—É–ø–ø–∞")
        
        if st.session_state.cast_data:
            # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            cast_display = []
            for line in st.session_state.cast_data:
                if ';' in line:
                    name, staff_id = line.split(';', 1)
                    cast_display.append({'–ò–º—è': name.strip(), 'ID': staff_id.strip()})
                else:
                    cast_display.append({'–ò–º—è': line.strip(), 'ID': ''})
            
            if cast_display:
                df_cast = pd.DataFrame(cast_display)
                st.dataframe(df_cast, use_container_width=True)
            else:
                st.write("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—ä–µ–º–æ—á–Ω–æ–π –≥—Ä—É–ø–ø–µ")
        else:
            st.write("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—ä–µ–º–æ—á–Ω–æ–π –≥—Ä—É–ø–ø–µ")
        
        # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        st.subheader("üì• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        if st.button("üìä –°–∫–∞—á–∞—Ç—å Excel —Ñ–∞–π–ª"):
            try:
                excel_file = create_excel_file(st.session_state.film_data, st.session_state.cast_data)
                
                st.download_button(
                    label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å Excel",
                    data=excel_file,
                    file_name=f"film_{film_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
                
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
    else:
        st.info("üëà –í–≤–µ–¥–∏—Ç–µ ID —Ñ–∏–ª—å–º–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é'")

# –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown("**–°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é Streamlit** ‚Ä¢ [–ö–∏–Ω–æ–ø–æ–∏—Å–∫ API](https://kinopoiskapiunofficial.tech/)")
