import streamlit as st
import pandas as pd
import requests
import json
from datetime import datetime
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ö–∏–Ω–æ–ø–æ–∏—Å–∫ –ü–∞—Ä—Å–µ—Ä",
    page_icon="üé¨",
    layout="wide"
)

# API URLs
API_URL = 'https://kinopoiskapiunofficial.tech/api/v2.2/films/{}'
API_URL_STAFF = 'https://kinopoiskapiunofficial.tech/api/v1/staff?filmId={}'
API_URL_BOXOFFICE = 'https://kinopoiskapiunofficial.tech/api/v2.2/films/{}/box_office'
API_URL_DISTRIBUTIONS = 'https://kinopoiskapiunofficial.tech/api/v2.2/films/{}/distributions'

def get_headers(api_key):
    return {
        'X-API-KEY': api_key,
        'Content-Type': 'application/json',
    }

def format_money(value):
    if not value or value == '-' or value is None:
        return '-'
    parts = str(value).split()
    if not parts or not parts[0].replace(',', '').replace(' ', '').isdigit():
        return value
    try:
        num = int(parts[0].replace(' ', '').replace(',', ''))
        currency = parts[1] if len(parts) > 1 and parts[1] else 'USD'
        formatted = f"{num:,}".replace(",", " ")
        return f"{formatted} {currency}".strip()
    except Exception as e:
        return value

def format_date(date_str):
    if not date_str or date_str == '-':
        return '-'
    try:
        dt = datetime.strptime(date_str[:10], '%Y-%m-%d')
        return dt.strftime('%d.%m.%Y')
    except Exception as e:
        return date_str

def format_duration(duration):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö"""
    if not duration or duration == '-' or duration is None:
        return '-'
    try:
        minutes = int(duration)
        if minutes <= 0:
            return '-'
        return str(minutes)
    except (ValueError, TypeError):
        return str(duration) if duration else '-'

def format_vote_count(vote_count):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤"""
    if not vote_count or vote_count == '-' or vote_count is None:
        return '-'
    try:
        count = int(vote_count)
        if count <= 0:
            return '-'
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
        return f"{count:,}".replace(",", " ")
    except (ValueError, TypeError):
        return str(vote_count) if vote_count else '-'

def get_film_info(film_id, api_key):
    url = API_URL.format(film_id)
    try:
        response = requests.get(url, headers=get_headers(api_key), timeout=10)
        if response.status_code != 200:
            return None, f'–û—à–∏–±–∫–∞: {response.status_code} ‚Äî {response.text}'
        return response.json(), None
    except Exception as e:
        return None, f'–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}'

def get_film_cast(film_id, api_key):
    url = API_URL_STAFF.format(film_id)
    try:
        response = requests.get(url, headers=get_headers(api_key), timeout=10)
        if response.status_code != 200:
            return []
        data = response.json()
        cast = []
        for p in data:
            profession = (p.get('professionText') or p.get('profession') or '').lower()
            if any(x in profession for x in ['–º–æ–Ω—Ç–∞–∂–µ—Ä', '—Ö—É–¥–æ–∂–Ω–∏–∫']):
                continue
            name = p.get('nameRu') or p.get('nameEn') or '-'
            staff_id = p.get('staffId')
            if staff_id:
                cast.append(f"{name};{staff_id}")
            else:
                cast.append(f"{name}")
        return cast
    except Exception as e:
        return []

def get_film_boxoffice(film_id, api_key):
    url = API_URL_BOXOFFICE.format(film_id)
    try:
        response = requests.get(url, headers=get_headers(api_key), timeout=10)
        if response.status_code != 200:
            return {}
        data = response.json()
        currency_symbols = {
            'USD': '$', 'RUB': '‚ÇΩ', 'EUR': '‚Ç¨', 'GBP': '¬£',
            'CNY': '¬•', 'JPY': '¬•', 'KZT': '‚Ç∏', 'UAH': '‚Ç¥',
            'BYN': 'Br', 'INR': '‚Çπ',
        }
        result = {}
        for item in data.get('items', []):
            amount = item.get('amount')
            currency = item.get('currencyCode', 'USD')
            symbol = currency_symbols.get(currency, currency)
            val = f"{amount} {symbol}" if amount else '-'
            if item['type'] == 'BUDGET':
                result['budget'] = val
            elif item['type'] == 'WORLD':
                result['world'] = val
            elif item['type'] == 'RUS':
                result['russia'] = val
            elif item['type'] == 'USA':
                result['usa'] = val
            elif item['type'] == 'MARKETING':
                result['marketing'] = val
        return result
    except Exception as e:
        return {}

def get_film_premieres(film_id, api_key):
    url = API_URL_DISTRIBUTIONS.format(film_id)
    try:
        response = requests.get(url, headers=get_headers(api_key), timeout=10)
        if response.status_code != 200:
            return '-', '-'
        data = response.json()
        premiere_rf = '-'
        premiere_world = '-'
        for item in data.get('items', []):
            t = item.get('type', '').upper()
            date = item.get('date', '-')
            country_obj = item.get('country')
            if t == 'WORLD_PREMIER':
                premiere_world = format_date(date)
            if t == 'COUNTRY_SPECIFIC' and country_obj:
                country_name = country_obj.get('country', '').lower()
                if country_name in ('—Ä–æ—Å—Å–∏—è', 'russia'):
                    premiere_rf = format_date(date)
        return premiere_rf, premiere_world
    except Exception as e:
        return '-', '-'

def create_excel_file(film_data, cast_data):
    """–°–æ–∑–¥–∞–µ—Ç Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ñ–∏–ª—å–º–µ"""
    output = io.BytesIO()
    
    try:
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        cleaned_film_data = {}
        for key, value in film_data.items():
            if isinstance(value, str):
                # –£–¥–∞–ª—è–µ–º –∏–ª–∏ –∑–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                cleaned_value = value.replace('\x00', '').replace('\ufeff', '')
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è Excel (–º–∞–∫—Å–∏–º—É–º 32767 —Å–∏–º–≤–æ–ª–æ–≤ –≤ —è—á–µ–π–∫–µ)
                if len(cleaned_value) > 32000:
                    cleaned_value = cleaned_value[:32000] + "..."
                cleaned_film_data[key] = cleaned_value
            else:
                cleaned_film_data[key] = value
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º–∞
        df_main = pd.DataFrame([cleaned_film_data])
        
        # –î–∞–Ω–Ω—ã–µ –æ –∫–∞—Å—Ç–µ
        cast_list = []
        for line in cast_data:
            if ';' in line:
                name, staff_id = line.split(';', 1)
                # –û—á–∏—â–∞–µ–º –∏–º—è –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
                clean_name = name.strip().replace('\x00', '').replace('\ufeff', '')
                if len(clean_name) > 255:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –∏–º–µ–Ω
                    clean_name = clean_name[:255]
                cast_list.append({'–ò–º—è': clean_name, 'ID': staff_id.strip()})
            else:
                clean_name = line.strip().replace('\x00', '').replace('\ufeff', '')
                if len(clean_name) > 255:
                    clean_name = clean_name[:255]
                cast_list.append({'–ò–º—è': clean_name, 'ID': ''})
        
        df_cast = pd.DataFrame(cast_list)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Excel —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            df_main.to_excel(writer, sheet_name='–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', index=False)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—Å—Ç–µ
            df_cast.to_excel(writer, sheet_name='–ê–∫—Ç–µ—Ä—ã –∏ —Å—ä–µ–º–æ—á–Ω–∞—è –≥—Ä—É–ø–ø–∞', index=False)
            
            # –ü–æ–ª—É—á–∞–µ–º workbook –∏ worksheet –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            workbook = writer.book
            worksheet_main = writer.sheets['–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è']
            worksheet_cast = writer.sheets['–ê–∫—Ç–µ—Ä—ã –∏ —Å—ä–µ–º–æ—á–Ω–∞—è –≥—Ä—É–ø–ø–∞']
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
            worksheet_main.set_column('A:A', 25)  # –ù–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π
            worksheet_main.set_column('B:B', 50)  # –ó–Ω–∞—á–µ–Ω–∏—è
            
            worksheet_cast.set_column('A:A', 40)  # –ò–º–µ–Ω–∞
            worksheet_cast.set_column('B:B', 15)  # ID
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            header_format = workbook.add_format({
                'bold': True,
                'bg_color': '#D3D3D3',
                'border': 1
            })
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
            for col_num, value in enumerate(df_main.columns.values):
                worksheet_main.write(0, col_num, value, header_format)
            
            for col_num, value in enumerate(df_cast.columns.values):
                worksheet_cast.write(0, col_num, value, header_format)
        
        output.seek(0)
        return output
        
    except Exception as e:
        # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é CSV
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞: {e}")
        return create_improved_csv_file(film_data, cast_data)

def create_improved_csv_file(film_data, cast_data):
    """–°–æ–∑–¥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π CSV —Ñ–∞–π–ª –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ Excel"""
    output = io.BytesIO()
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
    temp_output = io.StringIO()
    
    try:
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        cleaned_film_data = {}
        for key, value in film_data.items():
            if isinstance(value, str):
                cleaned_value = value.replace('\x00', '').replace('\ufeff', '').replace('\n', ' ').replace('\r', ' ')
                cleaned_film_data[key] = cleaned_value
            else:
                cleaned_film_data[key] = value
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        df_main = pd.DataFrame([cleaned_film_data])
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –∞–∫—Ç–µ—Ä–æ–≤
        cast_list = []
        for line in cast_data:
            if ';' in line:
                name, staff_id = line.split(';', 1)
                clean_name = name.strip().replace('\x00', '').replace('\ufeff', '').replace('\n', ' ').replace('\r', ' ')
                cast_list.append({'–ò–º—è': clean_name, 'ID': staff_id.strip()})
            else:
                clean_name = line.strip().replace('\x00', '').replace('\ufeff', '').replace('\n', ' ').replace('\r', ' ')
                cast_list.append({'–ò–º—è': clean_name, 'ID': ''})
        
        df_cast = pd.DataFrame(cast_list)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ CSV —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
        temp_output.write("=== –û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===\n")
        df_main.to_csv(temp_output, index=False, encoding='utf-8', sep=';', quoting=1)
        
        temp_output.write("\n=== –ê–ö–¢–ï–†–´ –ò –°–™–ï–ú–û–ß–ù–ê–Ø –ì–†–£–ü–ü–ê ===\n")
        df_cast.to_csv(temp_output, index=False, encoding='utf-8', sep=';', quoting=1)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ –∫–æ–¥–∏—Ä—É–µ–º —Å BOM –¥–ª—è Excel
        content = temp_output.getvalue()
        temp_output.close()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–π—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
        final_content = '\ufeff' + content
        output.write(final_content.encode('utf-8'))
        output.seek(0)
        
        return output
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ CSV —Ñ–∞–π–ª–∞: {e}")
        return None

def create_simple_csv_file(film_data, cast_data):
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π CSV —Ñ–∞–π–ª –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    output = io.StringIO()
    
    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    df_main = pd.DataFrame([film_data])
    
    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –∞–∫—Ç–µ—Ä–æ–≤
    cast_list = []
    for line in cast_data:
        if ';' in line:
            name, staff_id = line.split(';', 1)
            cast_list.append({'–ò–º—è': name.strip(), 'ID': staff_id.strip()})
        else:
            cast_list.append({'–ò–º—è': line.strip(), 'ID': ''})
    
    df_cast = pd.DataFrame(cast_list)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    output.write("=== –û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===\n")
    df_main.to_csv(output, index=False, encoding='utf-8')
    
    output.write("\n=== –ê–ö–¢–ï–†–´ –ò –°–™–ï–ú–û–ß–ù–ê–Ø –ì–†–£–ü–ü–ê ===\n")
    df_cast.to_csv(output, index=False, encoding='utf-8')
    
    content = output.getvalue()
    output.close()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å UTF-8 BOM –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    return io.BytesIO(('\ufeff' + content).encode('utf-8'))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
if 'film_data' not in st.session_state:
    st.session_state.film_data = {}
if 'cast_data' not in st.session_state:
    st.session_state.cast_data = []

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üé¨ –ö–∏–Ω–æ–ø–æ–∏—Å–∫ –ü–∞—Ä—Å–µ—Ä")
st.markdown("–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–∞—Ö –∏ —Å–µ—Ä–∏–∞–ª–∞—Ö —á–µ—Ä–µ–∑ API –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
with st.sidebar:
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    api_key = st.text_input("API-–∫–ª—é—á:", type="password", help="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API-–∫–ª—é—á –æ—Ç –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞")
    
    if st.button("‚ÑπÔ∏è –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å API-–∫–ª—é—á?"):
        st.info("""
        1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ kinopoiskapiunofficial.tech
        2. –ü–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API-–∫–ª—é—á
        3. –í—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ø–æ–ª–µ –≤—ã—à–µ
        """)

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
col1, col2 = st.columns([1, 3])

with col1:
    st.header("üîç –ü–æ–∏—Å–∫")
    film_id = st.text_input("ID —Ñ–∏–ª—å–º–∞/—Å–µ—Ä–∏–∞–ª–∞:", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 326")
    
    if st.button("üéØ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", type="primary"):
        if not api_key:
            st.error("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ API-–∫–ª—é—á –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏!")
        elif not film_id.isdigit():
            st.error("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID!")
        else:
            with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."):
                # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                data, error = get_film_info(film_id, api_key)
                
                if error or not data:
                    st.error(f"‚ùå {error or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}")
                else:
                    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    def safe(val):
                        return '-' if val is None or val == '' else val
                    
                    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    film_info = {
                        '–ù–∞–∑–≤–∞–Ω–∏–µ (RU)': safe(data.get('nameRu')),
                        '–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ': safe(data.get('nameOriginal')),
                        '–ì–æ–¥': safe(data.get('year')),
                        '–ñ–∞–Ω—Ä—ã': safe(', '.join([g['genre'] for g in data.get('genres', [])]) if data.get('genres') else '-'),
                        '–°—Ç—Ä–∞–Ω–∞': safe(', '.join([c['country'] for c in data.get('countries', []) if c.get('country')])),
                        '–†–µ–π—Ç–∏–Ω–≥ IMDB': safe(data.get('ratingImdb')),
                        '–†–µ–π—Ç–∏–Ω–≥ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞': safe(data.get('ratingKinopoisk')),
                        '–ö–æ–ª-–≤–æ –≥–æ–ª–æ—Å–æ–≤ –ö–ü': format_vote_count(data.get('ratingKinopoiskVoteCount')),
                        '–û–ø–∏—Å–∞–Ω–∏–µ': safe(data.get('description')),
                        '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω)': format_duration(data.get('filmLength'))
                    }
                    
                    # –ö–∞—Å—Å–∞
                    boxoffice = get_film_boxoffice(film_id, api_key)
                    film_info.update({
                        '–ë—é–¥–∂–µ—Ç': format_money(boxoffice.get('budget', '-')) if boxoffice else '-',
                        '–ö–∞—Å—Å–∞ (–º–∏—Ä)': format_money(boxoffice.get('world', '-')) if boxoffice else '-',
                        '–ö–∞—Å—Å–∞ (–†–§)': format_money(boxoffice.get('russia', '-')) if boxoffice else '-',
                        '–ö–∞—Å—Å–∞ (–°–®–ê)': format_money(boxoffice.get('usa', '-')) if boxoffice else '-'
                    })
                    
                    # –ü—Ä–µ–º—å–µ—Ä—ã
                    premiere_rf, premiere_world = get_film_premieres(film_id, api_key)
                    film_info.update({
                        '–ü—Ä–µ–º—å–µ—Ä–∞ –≤ –†–§': safe(premiere_rf),
                        '–ü—Ä–µ–º—å–µ—Ä–∞ –º–∏—Ä–æ–≤–∞—è': safe(premiere_world)
                    })
                    
                    # –ê–∫—Ç–µ—Ä—ã –∏ —Å—ä–µ–º–æ—á–Ω–∞—è –≥—Ä—É–ø–ø–∞
                    cast = get_film_cast(film_id, api_key)
                    
                    st.session_state.film_data = film_info
                    st.session_state.cast_data = cast
                    
                    st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")

with col2:
    st.header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    
    if st.session_state.film_data:
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        st.subheader("üé≠ –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –≤–∏–¥–µ –º–µ—Ç—Ä–∏–∫ –∏ –ø–æ–ª–µ–π
        col_info1, col_info2 = st.columns(2)
        
        with col_info1:
            st.metric("–ù–∞–∑–≤–∞–Ω–∏–µ (RU)", st.session_state.film_data.get('–ù–∞–∑–≤–∞–Ω–∏–µ (RU)', '-'))
            st.metric("–ì–æ–¥", st.session_state.film_data.get('–ì–æ–¥', '-'))
            st.metric("–†–µ–π—Ç–∏–Ω–≥ IMDB", st.session_state.film_data.get('–†–µ–π—Ç–∏–Ω–≥ IMDB', '-'))
            st.metric("–ü—Ä–µ–º—å–µ—Ä–∞ –≤ –†–§", st.session_state.film_data.get('–ü—Ä–µ–º—å–µ—Ä–∞ –≤ –†–§', '-'))
            st.metric("–ü—Ä–µ–º—å–µ—Ä–∞ –º–∏—Ä–æ–≤–∞—è", st.session_state.film_data.get('–ü—Ä–µ–º—å–µ—Ä–∞ –º–∏—Ä–æ–≤–∞—è', '-'))
        
        with col_info2:
            st.metric("–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ", st.session_state.film_data.get('–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ', '-'))
            st.metric("–°—Ç—Ä–∞–Ω–∞", st.session_state.film_data.get('–°—Ç—Ä–∞–Ω–∞', '-'))
            st.metric("–†–µ–π—Ç–∏–Ω–≥ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞", st.session_state.film_data.get('–†–µ–π—Ç–∏–Ω–≥ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞', '-'))
            st.metric("–ö–æ–ª-–≤–æ –≥–æ–ª–æ—Å–æ–≤ –ö–ü", st.session_state.film_data.get('–ö–æ–ª-–≤–æ –≥–æ–ª–æ—Å–æ–≤ –ö–ü', '-'))
            st.metric("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω)", st.session_state.film_data.get('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω)', '-'))
        
        # –ñ–∞–Ω—Ä—ã –æ—Ç–¥–µ–ª—å–Ω–æ –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É
        st.metric("–ñ–∞–Ω—Ä—ã", st.session_state.film_data.get('–ñ–∞–Ω—Ä—ã', '-'))
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        st.subheader("üìù –û–ø–∏—Å–∞–Ω–∏–µ")
        st.write(st.session_state.film_data.get('–û–ø–∏—Å–∞–Ω–∏–µ', '-'))
        
        # –§–∏–Ω–∞–Ω—Å—ã
        st.subheader("üí∞ –§–∏–Ω–∞–Ω—Å—ã")
        col_money1, col_money2 = st.columns(2)
        
        with col_money1:
            st.metric("–ë—é–¥–∂–µ—Ç", st.session_state.film_data.get('–ë—é–¥–∂–µ—Ç', '-'))
            st.metric("–ö–∞—Å—Å–∞ (–º–∏—Ä)", st.session_state.film_data.get('–ö–∞—Å—Å–∞ (–º–∏—Ä)', '-'))
        
        with col_money2:
            st.metric("–ö–∞—Å—Å–∞ (–†–§)", st.session_state.film_data.get('–ö–∞—Å—Å–∞ (–†–§)', '-'))
            st.metric("–ö–∞—Å—Å–∞ (–°–®–ê)", st.session_state.film_data.get('–ö–∞—Å—Å–∞ (–°–®–ê)', '-'))
        
        # –ê–∫—Ç–µ—Ä—ã –∏ —Å—ä–µ–º–æ—á–Ω–∞—è –≥—Ä—É–ø–ø–∞
        st.subheader("üé¨ –ê–∫—Ç–µ—Ä—ã –∏ —Å—ä–µ–º–æ—á–Ω–∞—è –≥—Ä—É–ø–ø–∞")
        
        if st.session_state.cast_data:
            # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            cast_display = []
            for line in st.session_state.cast_data:
                if ';' in line:
                    name, staff_id = line.split(';', 1)
                    cast_display.append({'–ò–º—è': name.strip(), 'ID': staff_id.strip()})
                else:
                    cast_display.append({'–ò–º—è': line.strip(), 'ID': ''})
            
            if cast_display:
                df_cast = pd.DataFrame(cast_display)
                st.dataframe(df_cast, use_container_width=True)
            else:
                st.write("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—ä–µ–º–æ—á–Ω–æ–π –≥—Ä—É–ø–ø–µ")
        else:
            st.write("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—ä–µ–º–æ—á–Ω–æ–π –≥—Ä—É–ø–ø–µ")
        
        # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        st.subheader("üì• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        col_export1, col_export2 = st.columns(2)
        
        with col_export1:
            if st.button("üìä –°–∫–∞—á–∞—Ç—å Excel —Ñ–∞–π–ª"):
                try:
                    with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞..."):
                        excel_file = create_excel_file(st.session_state.film_data, st.session_state.cast_data)
                        
                        if excel_file:
                            filename = f"film_{film_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
                            
                            st.download_button(
                                label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å Excel",
                                data=excel_file,
                                file_name=filename,
                                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                                key="excel_download"
                            )
                            st.success("Excel —Ñ–∞–π–ª –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é!")
                        else:
                            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Excel —Ñ–∞–π–ª")
                            
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞: {e}")
                    st.info("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞—á–∞—Ç—å CSV —Ñ–∞–π–ª")
        
        with col_export2:
            # –°–æ–∑–¥–∞–µ–º –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ CSV
            csv_col1, csv_col2 = st.columns(2)
            
            with csv_col1:
                if st.button("üìÑ CSV (–¥–ª—è Excel)"):
                    try:
                        with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ CSV —Ñ–∞–π–ª–∞..."):
                            csv_file = create_improved_csv_file(st.session_state.film_data, st.session_state.cast_data)
                            
                            if csv_file:
                                filename = f"film_{film_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
                                
                                st.download_button(
                                    label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å CSV",
                                    data=csv_file,
                                    file_name=filename,
                                    mime="text/csv",
                                    key="csv_download_1"
                                )
                                st.success("CSV —Ñ–∞–π–ª –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é!")
                            else:
                                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å CSV —Ñ–∞–π–ª")
                                
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ CSV —Ñ–∞–π–ª–∞: {e}")
            
            with csv_col2:
                if st.button("üìã CSV (–ø—Ä–æ—Å—Ç–æ–π)"):
                    try:
                        with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ CSV —Ñ–∞–π–ª–∞..."):
                            csv_file = create_simple_csv_file(st.session_state.film_data, st.session_state.cast_data)
                            
                            if csv_file:
                                filename = f"film_{film_id}_simple_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
                                
                                st.download_button(
                                    label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å CSV",
                                    data=csv_file,
                                    file_name=filename,
                                    mime="text/csv",
                                    key="csv_download_2"
                                )
                                st.success("–ü—Ä–æ—Å—Ç–æ–π CSV —Ñ–∞–π–ª –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é!")
                            else:
                                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π CSV —Ñ–∞–π–ª")
                                
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ CSV —Ñ–∞–π–ª–∞: {e}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —ç–∫—Å–ø–æ—Ä—Ç—É
        with st.expander("üí° –°–æ–≤–µ—Ç—ã –ø–æ —ç–∫—Å–ø–æ—Ä—Ç—É"):
            st.markdown("""
            **–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å Excel —Ñ–∞–π–ª–æ–º:**
            1. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞—á–∞—Ç—å CSV —Ñ–∞–π–ª –≤–º–µ—Å—Ç–æ Excel
            2. –ü—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ CSV –≤ Excel –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å "—Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π" (;)
            3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
            
            **–§–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤:**
            - **Excel**: –£–¥–æ–±–µ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            - **CSV –¥–ª—è Excel**: –°–æ–≤–º–µ—Å—Ç–∏–º —Å Excel, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π
            - **CSV –ø—Ä–æ—Å—Ç–æ–π**: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ª—é–±—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º
            
            **–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫:**
            ```
            pip install xlsxwriter openpyxl
            ```
            """)
        
    else:
        st.info("üëà –í–≤–µ–¥–∏—Ç–µ ID —Ñ–∏–ª—å–º–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é'")

# –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown("**–°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é Streamlit** ‚Ä¢ [–ö–∏–Ω–æ–ø–æ–∏—Å–∫ API](https://kinopoiskapiunofficial.tech/)")
